// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: conference/conference.proto

package conference

import (
	common "github.com/maciejas22/conference-manager-api/cm-proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConferencesFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociatedOnly bool   `protobuf:"varint,1,opt,name=associatedOnly,proto3" json:"associatedOnly,omitempty"`
	RunningOnly    bool   `protobuf:"varint,2,opt,name=runningOnly,proto3" json:"runningOnly,omitempty"`
	Title          string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ConferencesFilters) Reset() {
	*x = ConferencesFilters{}
	mi := &file_conference_conference_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesFilters) ProtoMessage() {}

func (x *ConferencesFilters) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesFilters.ProtoReflect.Descriptor instead.
func (*ConferencesFilters) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{0}
}

func (x *ConferencesFilters) GetAssociatedOnly() bool {
	if x != nil {
		return x.AssociatedOnly
	}
	return false
}

func (x *ConferencesFilters) GetRunningOnly() bool {
	if x != nil {
		return x.RunningOnly
	}
	return false
}

func (x *ConferencesFilters) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Conference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	StartDate            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Location             string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Website              string                 `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	Acronym              string                 `protobuf:"bytes,7,opt,name=acronym,proto3" json:"acronym,omitempty"`
	AdditionalInfo       string                 `protobuf:"bytes,8,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
	RegistrationDeadline *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=registrationDeadline,proto3" json:"registrationDeadline,omitempty"`
	EventsCount          int32                  `protobuf:"varint,10,opt,name=eventsCount,proto3" json:"eventsCount,omitempty"`
	TicketPrice          int32                  `protobuf:"varint,11,opt,name=ticketPrice,proto3" json:"ticketPrice,omitempty"`
	ParticipantsLimit    int32                  `protobuf:"varint,12,opt,name=participantsLimit,proto3" json:"participantsLimit,omitempty"`
	ParticipantsCount    int32                  `protobuf:"varint,13,opt,name=participantsCount,proto3" json:"participantsCount,omitempty"`
}

func (x *Conference) Reset() {
	*x = Conference{}
	mi := &file_conference_conference_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conference) ProtoMessage() {}

func (x *Conference) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conference.ProtoReflect.Descriptor instead.
func (*Conference) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{1}
}

func (x *Conference) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Conference) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Conference) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Conference) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Conference) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Conference) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Conference) GetAcronym() string {
	if x != nil {
		return x.Acronym
	}
	return ""
}

func (x *Conference) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *Conference) GetRegistrationDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistrationDeadline
	}
	return nil
}

func (x *Conference) GetEventsCount() int32 {
	if x != nil {
		return x.EventsCount
	}
	return 0
}

func (x *Conference) GetTicketPrice() int32 {
	if x != nil {
		return x.TicketPrice
	}
	return 0
}

func (x *Conference) GetParticipantsLimit() int32 {
	if x != nil {
		return x.ParticipantsLimit
	}
	return 0
}

func (x *Conference) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

type ConferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceIds []int32 `protobuf:"varint,1,rep,packed,name=conferenceIds,proto3" json:"conferenceIds,omitempty"`
}

func (x *ConferencesRequest) Reset() {
	*x = ConferencesRequest{}
	mi := &file_conference_conference_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesRequest) ProtoMessage() {}

func (x *ConferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesRequest.ProtoReflect.Descriptor instead.
func (*ConferencesRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{2}
}

func (x *ConferencesRequest) GetConferenceIds() []int32 {
	if x != nil {
		return x.ConferenceIds
	}
	return nil
}

type ConferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conferences []*Conference `protobuf:"bytes,1,rep,name=conferences,proto3" json:"conferences,omitempty"`
}

func (x *ConferencesResponse) Reset() {
	*x = ConferencesResponse{}
	mi := &file_conference_conference_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesResponse) ProtoMessage() {}

func (x *ConferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesResponse.ProtoReflect.Descriptor instead.
func (*ConferencesResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{3}
}

func (x *ConferencesResponse) GetConferences() []*Conference {
	if x != nil {
		return x.Conferences
	}
	return nil
}

type ConferencesMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunningConferences        int32 `protobuf:"varint,1,opt,name=runningConferences,proto3" json:"runningConferences,omitempty"`
	StartingInLessThan24Hours int32 `protobuf:"varint,2,opt,name=startingInLessThan24Hours,proto3" json:"startingInLessThan24Hours,omitempty"`
	TotalConducted            int32 `protobuf:"varint,3,opt,name=totalConducted,proto3" json:"totalConducted,omitempty"`
	ParticipantsToday         int32 `protobuf:"varint,4,opt,name=participantsToday,proto3" json:"participantsToday,omitempty"`
}

func (x *ConferencesMetrics) Reset() {
	*x = ConferencesMetrics{}
	mi := &file_conference_conference_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesMetrics) ProtoMessage() {}

func (x *ConferencesMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesMetrics.ProtoReflect.Descriptor instead.
func (*ConferencesMetrics) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{4}
}

func (x *ConferencesMetrics) GetRunningConferences() int32 {
	if x != nil {
		return x.RunningConferences
	}
	return 0
}

func (x *ConferencesMetrics) GetStartingInLessThan24Hours() int32 {
	if x != nil {
		return x.StartingInLessThan24Hours
	}
	return 0
}

func (x *ConferencesMetrics) GetTotalConducted() int32 {
	if x != nil {
		return x.TotalConducted
	}
	return 0
}

func (x *ConferencesMetrics) GetParticipantsToday() int32 {
	if x != nil {
		return x.ParticipantsToday
	}
	return 0
}

type ConferencesPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceIds []int32         `protobuf:"varint,1,rep,packed,name=conferenceIds,proto3" json:"conferenceIds,omitempty"`
	Meta          *ConferenceMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ConferencesPage) Reset() {
	*x = ConferencesPage{}
	mi := &file_conference_conference_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesPage) ProtoMessage() {}

func (x *ConferencesPage) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesPage.ProtoReflect.Descriptor instead.
func (*ConferencesPage) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{5}
}

func (x *ConferencesPage) GetConferenceIds() []int32 {
	if x != nil {
		return x.ConferenceIds
	}
	return nil
}

func (x *ConferencesPage) GetMeta() *ConferenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ConferenceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *common.PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ConferenceMeta) Reset() {
	*x = ConferenceMeta{}
	mi := &file_conference_conference_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferenceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceMeta) ProtoMessage() {}

func (x *ConferenceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceMeta.ProtoReflect.Descriptor instead.
func (*ConferenceMeta) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{6}
}

func (x *ConferenceMeta) GetPage() *common.PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

type AgendaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Event     string                 `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	Speaker   string                 `protobuf:"bytes,5,opt,name=speaker,proto3" json:"speaker,omitempty"`
}

func (x *AgendaItem) Reset() {
	*x = AgendaItem{}
	mi := &file_conference_conference_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgendaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgendaItem) ProtoMessage() {}

func (x *AgendaItem) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgendaItem.ProtoReflect.Descriptor instead.
func (*AgendaItem) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{7}
}

func (x *AgendaItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AgendaItem) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AgendaItem) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *AgendaItem) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *AgendaItem) GetSpeaker() string {
	if x != nil {
		return x.Speaker
	}
	return ""
}

type CreateAgendaItemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Event     string                 `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Speaker   string                 `protobuf:"bytes,4,opt,name=speaker,proto3" json:"speaker,omitempty"`
}

func (x *CreateAgendaItemInput) Reset() {
	*x = CreateAgendaItemInput{}
	mi := &file_conference_conference_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgendaItemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgendaItemInput) ProtoMessage() {}

func (x *CreateAgendaItemInput) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgendaItemInput.ProtoReflect.Descriptor instead.
func (*CreateAgendaItemInput) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAgendaItemInput) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreateAgendaItemInput) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CreateAgendaItemInput) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *CreateAgendaItemInput) GetSpeaker() string {
	if x != nil {
		return x.Speaker
	}
	return ""
}

type CreateConferenceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	StartDate            *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate              *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Location             string                   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Website              string                   `protobuf:"bytes,5,opt,name=website,proto3" json:"website,omitempty"`
	Acronym              string                   `protobuf:"bytes,6,opt,name=acronym,proto3" json:"acronym,omitempty"`
	AdditionalInfo       string                   `protobuf:"bytes,7,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
	ParticipantsLimit    int32                    `protobuf:"varint,8,opt,name=participantsLimit,proto3" json:"participantsLimit,omitempty"`
	RegistrationDeadline *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=registrationDeadline,proto3" json:"registrationDeadline,omitempty"`
	Agenda               []*CreateAgendaItemInput `protobuf:"bytes,10,rep,name=agenda,proto3" json:"agenda,omitempty"`
	TicketPrice          int32                    `protobuf:"varint,12,opt,name=ticketPrice,proto3" json:"ticketPrice,omitempty"`
}

func (x *CreateConferenceInput) Reset() {
	*x = CreateConferenceInput{}
	mi := &file_conference_conference_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConferenceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConferenceInput) ProtoMessage() {}

func (x *CreateConferenceInput) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConferenceInput.ProtoReflect.Descriptor instead.
func (*CreateConferenceInput) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{9}
}

func (x *CreateConferenceInput) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateConferenceInput) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreateConferenceInput) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CreateConferenceInput) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateConferenceInput) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *CreateConferenceInput) GetAcronym() string {
	if x != nil {
		return x.Acronym
	}
	return ""
}

func (x *CreateConferenceInput) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *CreateConferenceInput) GetParticipantsLimit() int32 {
	if x != nil {
		return x.ParticipantsLimit
	}
	return 0
}

func (x *CreateConferenceInput) GetRegistrationDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistrationDeadline
	}
	return nil
}

func (x *CreateConferenceInput) GetAgenda() []*CreateAgendaItemInput {
	if x != nil {
		return x.Agenda
	}
	return nil
}

func (x *CreateConferenceInput) GetTicketPrice() int32 {
	if x != nil {
		return x.TicketPrice
	}
	return 0
}

type ModifyAgendaItemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateItem *CreateAgendaItemInput `protobuf:"bytes,1,opt,name=createItem,proto3" json:"createItem,omitempty"`
	DeleteItem int32                  `protobuf:"varint,2,opt,name=deleteItem,proto3" json:"deleteItem,omitempty"`
}

func (x *ModifyAgendaItemInput) Reset() {
	*x = ModifyAgendaItemInput{}
	mi := &file_conference_conference_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyAgendaItemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAgendaItemInput) ProtoMessage() {}

func (x *ModifyAgendaItemInput) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAgendaItemInput.ProtoReflect.Descriptor instead.
func (*ModifyAgendaItemInput) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyAgendaItemInput) GetCreateItem() *CreateAgendaItemInput {
	if x != nil {
		return x.CreateItem
	}
	return nil
}

func (x *ModifyAgendaItemInput) GetDeleteItem() int32 {
	if x != nil {
		return x.DeleteItem
	}
	return 0
}

type ModifyConferenceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	StartDate            *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate              *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Location             string                   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Website              string                   `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	Acronym              string                   `protobuf:"bytes,7,opt,name=acronym,proto3" json:"acronym,omitempty"`
	AdditionalInfo       string                   `protobuf:"bytes,8,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
	ParticipantsLimit    int32                    `protobuf:"varint,9,opt,name=participantsLimit,proto3" json:"participantsLimit,omitempty"`
	RegistrationDeadline *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=registrationDeadline,proto3" json:"registrationDeadline,omitempty"`
	Agenda               []*ModifyAgendaItemInput `protobuf:"bytes,11,rep,name=agenda,proto3" json:"agenda,omitempty"`
	TicketPrice          int32                    `protobuf:"varint,13,opt,name=ticketPrice,proto3" json:"ticketPrice,omitempty"`
}

func (x *ModifyConferenceInput) Reset() {
	*x = ModifyConferenceInput{}
	mi := &file_conference_conference_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyConferenceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyConferenceInput) ProtoMessage() {}

func (x *ModifyConferenceInput) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyConferenceInput.ProtoReflect.Descriptor instead.
func (*ModifyConferenceInput) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyConferenceInput) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyConferenceInput) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ModifyConferenceInput) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ModifyConferenceInput) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ModifyConferenceInput) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ModifyConferenceInput) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ModifyConferenceInput) GetAcronym() string {
	if x != nil {
		return x.Acronym
	}
	return ""
}

func (x *ModifyConferenceInput) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *ModifyConferenceInput) GetParticipantsLimit() int32 {
	if x != nil {
		return x.ParticipantsLimit
	}
	return 0
}

func (x *ModifyConferenceInput) GetRegistrationDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistrationDeadline
	}
	return nil
}

func (x *ModifyConferenceInput) GetAgenda() []*ModifyAgendaItemInput {
	if x != nil {
		return x.Agenda
	}
	return nil
}

func (x *ModifyConferenceInput) GetTicketPrice() int32 {
	if x != nil {
		return x.TicketPrice
	}
	return 0
}

type ConferencesPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32               `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Page    *common.Page        `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort    *common.Sort        `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Filters *ConferencesFilters `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ConferencesPageRequest) Reset() {
	*x = ConferencesPageRequest{}
	mi := &file_conference_conference_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesPageRequest) ProtoMessage() {}

func (x *ConferencesPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesPageRequest.ProtoReflect.Descriptor instead.
func (*ConferencesPageRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{12}
}

func (x *ConferencesPageRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConferencesPageRequest) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ConferencesPageRequest) GetSort() *common.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ConferencesPageRequest) GetFilters() *ConferencesFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ConferencesPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferencesPage *ConferencesPage `protobuf:"bytes,1,opt,name=conferencesPage,proto3" json:"conferencesPage,omitempty"`
}

func (x *ConferencesPageResponse) Reset() {
	*x = ConferencesPageResponse{}
	mi := &file_conference_conference_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesPageResponse) ProtoMessage() {}

func (x *ConferencesPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesPageResponse.ProtoReflect.Descriptor instead.
func (*ConferencesPageResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{13}
}

func (x *ConferencesPageResponse) GetConferencesPage() *ConferencesPage {
	if x != nil {
		return x.ConferencesPage
	}
	return nil
}

type ConferencesMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConferencesMetricsRequest) Reset() {
	*x = ConferencesMetricsRequest{}
	mi := &file_conference_conference_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesMetricsRequest) ProtoMessage() {}

func (x *ConferencesMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesMetricsRequest.ProtoReflect.Descriptor instead.
func (*ConferencesMetricsRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{14}
}

type ConferencesMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics *ConferencesMetrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ConferencesMetricsResponse) Reset() {
	*x = ConferencesMetricsResponse{}
	mi := &file_conference_conference_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConferencesMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferencesMetricsResponse) ProtoMessage() {}

func (x *ConferencesMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferencesMetricsResponse.ProtoReflect.Descriptor instead.
func (*ConferencesMetricsResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{15}
}

func (x *ConferencesMetricsResponse) GetMetrics() *ConferencesMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type CreateConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                int32                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CreateConferenceInput *CreateConferenceInput `protobuf:"bytes,2,opt,name=createConferenceInput,proto3" json:"createConferenceInput,omitempty"`
}

func (x *CreateConferenceRequest) Reset() {
	*x = CreateConferenceRequest{}
	mi := &file_conference_conference_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConferenceRequest) ProtoMessage() {}

func (x *CreateConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateConferenceRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{16}
}

func (x *CreateConferenceRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateConferenceRequest) GetCreateConferenceInput() *CreateConferenceInput {
	if x != nil {
		return x.CreateConferenceInput
	}
	return nil
}

type CreateConferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
}

func (x *CreateConferenceResponse) Reset() {
	*x = CreateConferenceResponse{}
	mi := &file_conference_conference_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConferenceResponse) ProtoMessage() {}

func (x *CreateConferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateConferenceResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{17}
}

func (x *CreateConferenceResponse) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

type ModifyConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *ModifyConferenceInput `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ModifyConferenceRequest) Reset() {
	*x = ModifyConferenceRequest{}
	mi := &file_conference_conference_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyConferenceRequest) ProtoMessage() {}

func (x *ModifyConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyConferenceRequest.ProtoReflect.Descriptor instead.
func (*ModifyConferenceRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{18}
}

func (x *ModifyConferenceRequest) GetInput() *ModifyConferenceInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ModifyConferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
}

func (x *ModifyConferenceResponse) Reset() {
	*x = ModifyConferenceResponse{}
	mi := &file_conference_conference_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyConferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyConferenceResponse) ProtoMessage() {}

func (x *ModifyConferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyConferenceResponse.ProtoReflect.Descriptor instead.
func (*ModifyConferenceResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{19}
}

func (x *ModifyConferenceResponse) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

type AgendaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
}

func (x *AgendaRequest) Reset() {
	*x = AgendaRequest{}
	mi := &file_conference_conference_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgendaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgendaRequest) ProtoMessage() {}

func (x *AgendaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgendaRequest.ProtoReflect.Descriptor instead.
func (*AgendaRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{20}
}

func (x *AgendaRequest) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

type AgendaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agenda []*AgendaItem `protobuf:"bytes,1,rep,name=agenda,proto3" json:"agenda,omitempty"`
}

func (x *AgendaResponse) Reset() {
	*x = AgendaResponse{}
	mi := &file_conference_conference_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgendaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgendaResponse) ProtoMessage() {}

func (x *AgendaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgendaResponse.ProtoReflect.Descriptor instead.
func (*AgendaResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{21}
}

func (x *AgendaResponse) GetAgenda() []*AgendaItem {
	if x != nil {
		return x.Agenda
	}
	return nil
}

type AddUserToConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
	UserId       int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AddUserToConferenceRequest) Reset() {
	*x = AddUserToConferenceRequest{}
	mi := &file_conference_conference_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToConferenceRequest) ProtoMessage() {}

func (x *AddUserToConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToConferenceRequest.ProtoReflect.Descriptor instead.
func (*AddUserToConferenceRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{22}
}

func (x *AddUserToConferenceRequest) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

func (x *AddUserToConferenceRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AddUserToConferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
}

func (x *AddUserToConferenceResponse) Reset() {
	*x = AddUserToConferenceResponse{}
	mi := &file_conference_conference_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToConferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToConferenceResponse) ProtoMessage() {}

func (x *AddUserToConferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToConferenceResponse.ProtoReflect.Descriptor instead.
func (*AddUserToConferenceResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{23}
}

func (x *AddUserToConferenceResponse) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

type RemoveUserFromConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
	UserId       int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RemoveUserFromConferenceRequest) Reset() {
	*x = RemoveUserFromConferenceRequest{}
	mi := &file_conference_conference_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromConferenceRequest) ProtoMessage() {}

func (x *RemoveUserFromConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromConferenceRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserFromConferenceRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveUserFromConferenceRequest) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

func (x *RemoveUserFromConferenceRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RemoveUserFromConferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveUserFromConferenceResponse) Reset() {
	*x = RemoveUserFromConferenceResponse{}
	mi := &file_conference_conference_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromConferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromConferenceResponse) ProtoMessage() {}

func (x *RemoveUserFromConferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromConferenceResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserFromConferenceResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{25}
}

type IsUserAssociatedWithConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
	UserId       int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *IsUserAssociatedWithConferenceRequest) Reset() {
	*x = IsUserAssociatedWithConferenceRequest{}
	mi := &file_conference_conference_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsUserAssociatedWithConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserAssociatedWithConferenceRequest) ProtoMessage() {}

func (x *IsUserAssociatedWithConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserAssociatedWithConferenceRequest.ProtoReflect.Descriptor instead.
func (*IsUserAssociatedWithConferenceRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{26}
}

func (x *IsUserAssociatedWithConferenceRequest) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

func (x *IsUserAssociatedWithConferenceRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type IsUserAssociatedWithConferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAssociated bool `protobuf:"varint,1,opt,name=isAssociated,proto3" json:"isAssociated,omitempty"`
}

func (x *IsUserAssociatedWithConferenceResponse) Reset() {
	*x = IsUserAssociatedWithConferenceResponse{}
	mi := &file_conference_conference_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsUserAssociatedWithConferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserAssociatedWithConferenceResponse) ProtoMessage() {}

func (x *IsUserAssociatedWithConferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserAssociatedWithConferenceResponse.ProtoReflect.Descriptor instead.
func (*IsUserAssociatedWithConferenceResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{27}
}

func (x *IsUserAssociatedWithConferenceResponse) GetIsAssociated() bool {
	if x != nil {
		return x.IsAssociated
	}
	return false
}

type GetOrganizerMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetOrganizerMetricsRequest) Reset() {
	*x = GetOrganizerMetricsRequest{}
	mi := &file_conference_conference_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizerMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizerMetricsRequest) ProtoMessage() {}

func (x *GetOrganizerMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizerMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizerMetricsRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{28}
}

func (x *GetOrganizerMetricsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetOrganizerMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunningConferences        int32   `protobuf:"varint,1,opt,name=runningConferences,proto3" json:"runningConferences,omitempty"`
	ParticipantsCount         int32   `protobuf:"varint,2,opt,name=participantsCount,proto3" json:"participantsCount,omitempty"`
	AverageParticipantsCount  float32 `protobuf:"fixed32,3,opt,name=averageParticipantsCount,proto3" json:"averageParticipantsCount,omitempty"`
	TotalOrganizedConferences int32   `protobuf:"varint,4,opt,name=totalOrganizedConferences,proto3" json:"totalOrganizedConferences,omitempty"`
}

func (x *GetOrganizerMetricsResponse) Reset() {
	*x = GetOrganizerMetricsResponse{}
	mi := &file_conference_conference_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizerMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizerMetricsResponse) ProtoMessage() {}

func (x *GetOrganizerMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizerMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizerMetricsResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{29}
}

func (x *GetOrganizerMetricsResponse) GetRunningConferences() int32 {
	if x != nil {
		return x.RunningConferences
	}
	return 0
}

func (x *GetOrganizerMetricsResponse) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *GetOrganizerMetricsResponse) GetAverageParticipantsCount() float32 {
	if x != nil {
		return x.AverageParticipantsCount
	}
	return 0
}

func (x *GetOrganizerMetricsResponse) GetTotalOrganizedConferences() int32 {
	if x != nil {
		return x.TotalOrganizedConferences
	}
	return 0
}

type ParticipantsTrendEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	NewParticipants int32                  `protobuf:"varint,2,opt,name=newParticipants,proto3" json:"newParticipants,omitempty"`
}

func (x *ParticipantsTrendEntry) Reset() {
	*x = ParticipantsTrendEntry{}
	mi := &file_conference_conference_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantsTrendEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsTrendEntry) ProtoMessage() {}

func (x *ParticipantsTrendEntry) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsTrendEntry.ProtoReflect.Descriptor instead.
func (*ParticipantsTrendEntry) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{30}
}

func (x *ParticipantsTrendEntry) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ParticipantsTrendEntry) GetNewParticipants() int32 {
	if x != nil {
		return x.NewParticipants
	}
	return 0
}

type ParticipantsTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ParticipantsTrendRequest) Reset() {
	*x = ParticipantsTrendRequest{}
	mi := &file_conference_conference_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantsTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsTrendRequest) ProtoMessage() {}

func (x *ParticipantsTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsTrendRequest.ProtoReflect.Descriptor instead.
func (*ParticipantsTrendRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{31}
}

func (x *ParticipantsTrendRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ParticipantsTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trend []*ParticipantsTrendEntry `protobuf:"bytes,1,rep,name=trend,proto3" json:"trend,omitempty"`
}

func (x *ParticipantsTrendResponse) Reset() {
	*x = ParticipantsTrendResponse{}
	mi := &file_conference_conference_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantsTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsTrendResponse) ProtoMessage() {}

func (x *ParticipantsTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsTrendResponse.ProtoReflect.Descriptor instead.
func (*ParticipantsTrendResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{32}
}

func (x *ParticipantsTrendResponse) GetTrend() []*ParticipantsTrendEntry {
	if x != nil {
		return x.Trend
	}
	return nil
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId     string `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	ConferenceId int32  `protobuf:"varint,2,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_conference_conference_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{33}
}

func (x *Ticket) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *Ticket) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

type TicketsPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Ticket        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *TicketsPageMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *TicketsPage) Reset() {
	*x = TicketsPage{}
	mi := &file_conference_conference_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketsPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsPage) ProtoMessage() {}

func (x *TicketsPage) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsPage.ProtoReflect.Descriptor instead.
func (*TicketsPage) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{34}
}

func (x *TicketsPage) GetData() []*Ticket {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TicketsPage) GetMeta() *TicketsPageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type TicketsPageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *common.PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *TicketsPageMeta) Reset() {
	*x = TicketsPageMeta{}
	mi := &file_conference_conference_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketsPageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsPageMeta) ProtoMessage() {}

func (x *TicketsPageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsPageMeta.ProtoReflect.Descriptor instead.
func (*TicketsPageMeta) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{35}
}

func (x *TicketsPageMeta) GetPage() *common.PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

type TicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32        `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Page   *common.Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *TicketsRequest) Reset() {
	*x = TicketsRequest{}
	mi := &file_conference_conference_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsRequest) ProtoMessage() {}

func (x *TicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsRequest.ProtoReflect.Descriptor instead.
func (*TicketsRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{36}
}

func (x *TicketsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TicketsRequest) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type TicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketsPage *TicketsPage `protobuf:"bytes,1,opt,name=ticketsPage,proto3" json:"ticketsPage,omitempty"`
}

func (x *TicketsResponse) Reset() {
	*x = TicketsResponse{}
	mi := &file_conference_conference_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsResponse) ProtoMessage() {}

func (x *TicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsResponse.ProtoReflect.Descriptor instead.
func (*TicketsResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{37}
}

func (x *TicketsResponse) GetTicketsPage() *TicketsPage {
	if x != nil {
		return x.TicketsPage
	}
	return nil
}

type GetConferenceOrganizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConferenceId int32 `protobuf:"varint,1,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
}

func (x *GetConferenceOrganizerRequest) Reset() {
	*x = GetConferenceOrganizerRequest{}
	mi := &file_conference_conference_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConferenceOrganizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConferenceOrganizerRequest) ProtoMessage() {}

func (x *GetConferenceOrganizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConferenceOrganizerRequest.ProtoReflect.Descriptor instead.
func (*GetConferenceOrganizerRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{38}
}

func (x *GetConferenceOrganizerRequest) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

type GetConferenceOrganizerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizerId int32 `protobuf:"varint,1,opt,name=organizerId,proto3" json:"organizerId,omitempty"`
}

func (x *GetConferenceOrganizerResponse) Reset() {
	*x = GetConferenceOrganizerResponse{}
	mi := &file_conference_conference_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConferenceOrganizerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConferenceOrganizerResponse) ProtoMessage() {}

func (x *GetConferenceOrganizerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConferenceOrganizerResponse.ProtoReflect.Descriptor instead.
func (*GetConferenceOrganizerResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{39}
}

func (x *GetConferenceOrganizerResponse) GetOrganizerId() int32 {
	if x != nil {
		return x.OrganizerId
	}
	return 0
}

type ValidateTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId     string `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	ConferenceId int32  `protobuf:"varint,2,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
}

func (x *ValidateTicketRequest) Reset() {
	*x = ValidateTicketRequest{}
	mi := &file_conference_conference_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTicketRequest) ProtoMessage() {}

func (x *ValidateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTicketRequest.ProtoReflect.Descriptor instead.
func (*ValidateTicketRequest) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{40}
}

func (x *ValidateTicketRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *ValidateTicketRequest) GetConferenceId() int32 {
	if x != nil {
		return x.ConferenceId
	}
	return 0
}

type ValidateTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *ValidateTicketResponse) Reset() {
	*x = ValidateTicketResponse{}
	mi := &file_conference_conference_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTicketResponse) ProtoMessage() {}

func (x *ValidateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conference_conference_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTicketResponse.ProtoReflect.Descriptor instead.
func (*ValidateTicketResponse) Descriptor() ([]byte, []int) {
	return file_conference_conference_proto_rawDescGZIP(), []int{41}
}

func (x *ValidateTicketResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

var File_conference_conference_proto protoreflect.FileDescriptor

var file_conference_conference_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x74, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4f,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0xd8, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x32, 0x34, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x32, 0x34, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x22, 0x67, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0a,
	0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x22, 0xf0, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x72,
	0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x64, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x64, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x80, 0x04, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x72,
	0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x72, 0x6f,
	0x6e, 0x79, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x64, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x64, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x64, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x3e, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x17, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x3e, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x61, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x22, 0x58, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63,
	0x0a, 0x25, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x26, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x77,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x48,
	0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x37, 0x0a, 0x0f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x0f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x15,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x32, 0x80, 0x0b, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x24,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x42, 0x5a, 0x40,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x69, 0x65,
	0x6a, 0x61, 0x73, 0x32, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6d, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conference_conference_proto_rawDescOnce sync.Once
	file_conference_conference_proto_rawDescData = file_conference_conference_proto_rawDesc
)

func file_conference_conference_proto_rawDescGZIP() []byte {
	file_conference_conference_proto_rawDescOnce.Do(func() {
		file_conference_conference_proto_rawDescData = protoimpl.X.CompressGZIP(file_conference_conference_proto_rawDescData)
	})
	return file_conference_conference_proto_rawDescData
}

var file_conference_conference_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_conference_conference_proto_goTypes = []any{
	(*ConferencesFilters)(nil),                     // 0: conference.ConferencesFilters
	(*Conference)(nil),                             // 1: conference.Conference
	(*ConferencesRequest)(nil),                     // 2: conference.ConferencesRequest
	(*ConferencesResponse)(nil),                    // 3: conference.ConferencesResponse
	(*ConferencesMetrics)(nil),                     // 4: conference.ConferencesMetrics
	(*ConferencesPage)(nil),                        // 5: conference.ConferencesPage
	(*ConferenceMeta)(nil),                         // 6: conference.ConferenceMeta
	(*AgendaItem)(nil),                             // 7: conference.AgendaItem
	(*CreateAgendaItemInput)(nil),                  // 8: conference.CreateAgendaItemInput
	(*CreateConferenceInput)(nil),                  // 9: conference.CreateConferenceInput
	(*ModifyAgendaItemInput)(nil),                  // 10: conference.ModifyAgendaItemInput
	(*ModifyConferenceInput)(nil),                  // 11: conference.ModifyConferenceInput
	(*ConferencesPageRequest)(nil),                 // 12: conference.ConferencesPageRequest
	(*ConferencesPageResponse)(nil),                // 13: conference.ConferencesPageResponse
	(*ConferencesMetricsRequest)(nil),              // 14: conference.ConferencesMetricsRequest
	(*ConferencesMetricsResponse)(nil),             // 15: conference.ConferencesMetricsResponse
	(*CreateConferenceRequest)(nil),                // 16: conference.CreateConferenceRequest
	(*CreateConferenceResponse)(nil),               // 17: conference.CreateConferenceResponse
	(*ModifyConferenceRequest)(nil),                // 18: conference.ModifyConferenceRequest
	(*ModifyConferenceResponse)(nil),               // 19: conference.ModifyConferenceResponse
	(*AgendaRequest)(nil),                          // 20: conference.AgendaRequest
	(*AgendaResponse)(nil),                         // 21: conference.AgendaResponse
	(*AddUserToConferenceRequest)(nil),             // 22: conference.AddUserToConferenceRequest
	(*AddUserToConferenceResponse)(nil),            // 23: conference.AddUserToConferenceResponse
	(*RemoveUserFromConferenceRequest)(nil),        // 24: conference.RemoveUserFromConferenceRequest
	(*RemoveUserFromConferenceResponse)(nil),       // 25: conference.RemoveUserFromConferenceResponse
	(*IsUserAssociatedWithConferenceRequest)(nil),  // 26: conference.IsUserAssociatedWithConferenceRequest
	(*IsUserAssociatedWithConferenceResponse)(nil), // 27: conference.IsUserAssociatedWithConferenceResponse
	(*GetOrganizerMetricsRequest)(nil),             // 28: conference.GetOrganizerMetricsRequest
	(*GetOrganizerMetricsResponse)(nil),            // 29: conference.GetOrganizerMetricsResponse
	(*ParticipantsTrendEntry)(nil),                 // 30: conference.ParticipantsTrendEntry
	(*ParticipantsTrendRequest)(nil),               // 31: conference.ParticipantsTrendRequest
	(*ParticipantsTrendResponse)(nil),              // 32: conference.ParticipantsTrendResponse
	(*Ticket)(nil),                                 // 33: conference.Ticket
	(*TicketsPage)(nil),                            // 34: conference.TicketsPage
	(*TicketsPageMeta)(nil),                        // 35: conference.TicketsPageMeta
	(*TicketsRequest)(nil),                         // 36: conference.TicketsRequest
	(*TicketsResponse)(nil),                        // 37: conference.TicketsResponse
	(*GetConferenceOrganizerRequest)(nil),          // 38: conference.GetConferenceOrganizerRequest
	(*GetConferenceOrganizerResponse)(nil),         // 39: conference.GetConferenceOrganizerResponse
	(*ValidateTicketRequest)(nil),                  // 40: conference.ValidateTicketRequest
	(*ValidateTicketResponse)(nil),                 // 41: conference.ValidateTicketResponse
	(*timestamppb.Timestamp)(nil),                  // 42: google.protobuf.Timestamp
	(*common.PageInfo)(nil),                        // 43: common.PageInfo
	(*common.Page)(nil),                            // 44: common.Page
	(*common.Sort)(nil),                            // 45: common.Sort
}
var file_conference_conference_proto_depIdxs = []int32{
	42, // 0: conference.Conference.startDate:type_name -> google.protobuf.Timestamp
	42, // 1: conference.Conference.endDate:type_name -> google.protobuf.Timestamp
	42, // 2: conference.Conference.registrationDeadline:type_name -> google.protobuf.Timestamp
	1,  // 3: conference.ConferencesResponse.conferences:type_name -> conference.Conference
	6,  // 4: conference.ConferencesPage.meta:type_name -> conference.ConferenceMeta
	43, // 5: conference.ConferenceMeta.page:type_name -> common.PageInfo
	42, // 6: conference.AgendaItem.startTime:type_name -> google.protobuf.Timestamp
	42, // 7: conference.AgendaItem.endTime:type_name -> google.protobuf.Timestamp
	42, // 8: conference.CreateAgendaItemInput.startTime:type_name -> google.protobuf.Timestamp
	42, // 9: conference.CreateAgendaItemInput.endTime:type_name -> google.protobuf.Timestamp
	42, // 10: conference.CreateConferenceInput.startDate:type_name -> google.protobuf.Timestamp
	42, // 11: conference.CreateConferenceInput.endDate:type_name -> google.protobuf.Timestamp
	42, // 12: conference.CreateConferenceInput.registrationDeadline:type_name -> google.protobuf.Timestamp
	8,  // 13: conference.CreateConferenceInput.agenda:type_name -> conference.CreateAgendaItemInput
	8,  // 14: conference.ModifyAgendaItemInput.createItem:type_name -> conference.CreateAgendaItemInput
	42, // 15: conference.ModifyConferenceInput.startDate:type_name -> google.protobuf.Timestamp
	42, // 16: conference.ModifyConferenceInput.endDate:type_name -> google.protobuf.Timestamp
	42, // 17: conference.ModifyConferenceInput.registrationDeadline:type_name -> google.protobuf.Timestamp
	10, // 18: conference.ModifyConferenceInput.agenda:type_name -> conference.ModifyAgendaItemInput
	44, // 19: conference.ConferencesPageRequest.page:type_name -> common.Page
	45, // 20: conference.ConferencesPageRequest.sort:type_name -> common.Sort
	0,  // 21: conference.ConferencesPageRequest.filters:type_name -> conference.ConferencesFilters
	5,  // 22: conference.ConferencesPageResponse.conferencesPage:type_name -> conference.ConferencesPage
	4,  // 23: conference.ConferencesMetricsResponse.metrics:type_name -> conference.ConferencesMetrics
	9,  // 24: conference.CreateConferenceRequest.createConferenceInput:type_name -> conference.CreateConferenceInput
	11, // 25: conference.ModifyConferenceRequest.input:type_name -> conference.ModifyConferenceInput
	7,  // 26: conference.AgendaResponse.agenda:type_name -> conference.AgendaItem
	42, // 27: conference.ParticipantsTrendEntry.date:type_name -> google.protobuf.Timestamp
	30, // 28: conference.ParticipantsTrendResponse.trend:type_name -> conference.ParticipantsTrendEntry
	33, // 29: conference.TicketsPage.data:type_name -> conference.Ticket
	35, // 30: conference.TicketsPage.meta:type_name -> conference.TicketsPageMeta
	43, // 31: conference.TicketsPageMeta.page:type_name -> common.PageInfo
	44, // 32: conference.TicketsRequest.page:type_name -> common.Page
	34, // 33: conference.TicketsResponse.ticketsPage:type_name -> conference.TicketsPage
	2,  // 34: conference.ConferenceService.GetConferences:input_type -> conference.ConferencesRequest
	20, // 35: conference.ConferenceService.GetConferenceAgenda:input_type -> conference.AgendaRequest
	12, // 36: conference.ConferenceService.GetConferencesPage:input_type -> conference.ConferencesPageRequest
	14, // 37: conference.ConferenceService.GetConferencesMetrics:input_type -> conference.ConferencesMetricsRequest
	16, // 38: conference.ConferenceService.CreateConference:input_type -> conference.CreateConferenceRequest
	18, // 39: conference.ConferenceService.ModifyConference:input_type -> conference.ModifyConferenceRequest
	22, // 40: conference.ConferenceService.AddUserToConference:input_type -> conference.AddUserToConferenceRequest
	24, // 41: conference.ConferenceService.RemoveUserFromConference:input_type -> conference.RemoveUserFromConferenceRequest
	26, // 42: conference.ConferenceService.IsUserAssociatedWithConference:input_type -> conference.IsUserAssociatedWithConferenceRequest
	28, // 43: conference.ConferenceService.GetOrganizerMetrics:input_type -> conference.GetOrganizerMetricsRequest
	31, // 44: conference.ConferenceService.GetParticipantsTrend:input_type -> conference.ParticipantsTrendRequest
	36, // 45: conference.ConferenceService.GetTickets:input_type -> conference.TicketsRequest
	38, // 46: conference.ConferenceService.GetConferenceOrganizer:input_type -> conference.GetConferenceOrganizerRequest
	40, // 47: conference.ConferenceService.ValidateTicket:input_type -> conference.ValidateTicketRequest
	3,  // 48: conference.ConferenceService.GetConferences:output_type -> conference.ConferencesResponse
	21, // 49: conference.ConferenceService.GetConferenceAgenda:output_type -> conference.AgendaResponse
	13, // 50: conference.ConferenceService.GetConferencesPage:output_type -> conference.ConferencesPageResponse
	15, // 51: conference.ConferenceService.GetConferencesMetrics:output_type -> conference.ConferencesMetricsResponse
	17, // 52: conference.ConferenceService.CreateConference:output_type -> conference.CreateConferenceResponse
	19, // 53: conference.ConferenceService.ModifyConference:output_type -> conference.ModifyConferenceResponse
	23, // 54: conference.ConferenceService.AddUserToConference:output_type -> conference.AddUserToConferenceResponse
	25, // 55: conference.ConferenceService.RemoveUserFromConference:output_type -> conference.RemoveUserFromConferenceResponse
	27, // 56: conference.ConferenceService.IsUserAssociatedWithConference:output_type -> conference.IsUserAssociatedWithConferenceResponse
	29, // 57: conference.ConferenceService.GetOrganizerMetrics:output_type -> conference.GetOrganizerMetricsResponse
	32, // 58: conference.ConferenceService.GetParticipantsTrend:output_type -> conference.ParticipantsTrendResponse
	37, // 59: conference.ConferenceService.GetTickets:output_type -> conference.TicketsResponse
	39, // 60: conference.ConferenceService.GetConferenceOrganizer:output_type -> conference.GetConferenceOrganizerResponse
	41, // 61: conference.ConferenceService.ValidateTicket:output_type -> conference.ValidateTicketResponse
	48, // [48:62] is the sub-list for method output_type
	34, // [34:48] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_conference_conference_proto_init() }
func file_conference_conference_proto_init() {
	if File_conference_conference_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conference_conference_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conference_conference_proto_goTypes,
		DependencyIndexes: file_conference_conference_proto_depIdxs,
		MessageInfos:      file_conference_conference_proto_msgTypes,
	}.Build()
	File_conference_conference_proto = out.File
	file_conference_conference_proto_rawDesc = nil
	file_conference_conference_proto_goTypes = nil
	file_conference_conference_proto_depIdxs = nil
}
