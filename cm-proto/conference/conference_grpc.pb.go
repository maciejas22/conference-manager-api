// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: conference/conference.proto

package conference

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConferenceService_GetConferences_FullMethodName                 = "/conference.ConferenceService/GetConferences"
	ConferenceService_GetConferenceAgenda_FullMethodName            = "/conference.ConferenceService/GetConferenceAgenda"
	ConferenceService_GetConferencesPage_FullMethodName             = "/conference.ConferenceService/GetConferencesPage"
	ConferenceService_GetConferencesMetrics_FullMethodName          = "/conference.ConferenceService/GetConferencesMetrics"
	ConferenceService_CreateConference_FullMethodName               = "/conference.ConferenceService/CreateConference"
	ConferenceService_ModifyConference_FullMethodName               = "/conference.ConferenceService/ModifyConference"
	ConferenceService_AddUserToConference_FullMethodName            = "/conference.ConferenceService/AddUserToConference"
	ConferenceService_RemoveUserFromConference_FullMethodName       = "/conference.ConferenceService/RemoveUserFromConference"
	ConferenceService_IsUserAssociatedWithConference_FullMethodName = "/conference.ConferenceService/IsUserAssociatedWithConference"
	ConferenceService_GetOrganizerMetrics_FullMethodName            = "/conference.ConferenceService/GetOrganizerMetrics"
	ConferenceService_GetParticipantsTrend_FullMethodName           = "/conference.ConferenceService/GetParticipantsTrend"
	ConferenceService_GetTickets_FullMethodName                     = "/conference.ConferenceService/GetTickets"
	ConferenceService_GetConferenceOrganizer_FullMethodName         = "/conference.ConferenceService/GetConferenceOrganizer"
	ConferenceService_ValidateTicket_FullMethodName                 = "/conference.ConferenceService/ValidateTicket"
)

// ConferenceServiceClient is the client API for ConferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConferenceServiceClient interface {
	GetConferences(ctx context.Context, in *ConferencesRequest, opts ...grpc.CallOption) (*ConferencesResponse, error)
	GetConferenceAgenda(ctx context.Context, in *AgendaRequest, opts ...grpc.CallOption) (*AgendaResponse, error)
	GetConferencesPage(ctx context.Context, in *ConferencesPageRequest, opts ...grpc.CallOption) (*ConferencesPageResponse, error)
	GetConferencesMetrics(ctx context.Context, in *ConferencesMetricsRequest, opts ...grpc.CallOption) (*ConferencesMetricsResponse, error)
	CreateConference(ctx context.Context, in *CreateConferenceRequest, opts ...grpc.CallOption) (*CreateConferenceResponse, error)
	ModifyConference(ctx context.Context, in *ModifyConferenceRequest, opts ...grpc.CallOption) (*ModifyConferenceResponse, error)
	AddUserToConference(ctx context.Context, in *AddUserToConferenceRequest, opts ...grpc.CallOption) (*AddUserToConferenceResponse, error)
	RemoveUserFromConference(ctx context.Context, in *RemoveUserFromConferenceRequest, opts ...grpc.CallOption) (*RemoveUserFromConferenceResponse, error)
	IsUserAssociatedWithConference(ctx context.Context, in *IsUserAssociatedWithConferenceRequest, opts ...grpc.CallOption) (*IsUserAssociatedWithConferenceResponse, error)
	GetOrganizerMetrics(ctx context.Context, in *GetOrganizerMetricsRequest, opts ...grpc.CallOption) (*GetOrganizerMetricsResponse, error)
	GetParticipantsTrend(ctx context.Context, in *ParticipantsTrendRequest, opts ...grpc.CallOption) (*ParticipantsTrendResponse, error)
	GetTickets(ctx context.Context, in *TicketsRequest, opts ...grpc.CallOption) (*TicketsResponse, error)
	GetConferenceOrganizer(ctx context.Context, in *GetConferenceOrganizerRequest, opts ...grpc.CallOption) (*GetConferenceOrganizerResponse, error)
	ValidateTicket(ctx context.Context, in *ValidateTicketRequest, opts ...grpc.CallOption) (*ValidateTicketResponse, error)
}

type conferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceServiceClient(cc grpc.ClientConnInterface) ConferenceServiceClient {
	return &conferenceServiceClient{cc}
}

func (c *conferenceServiceClient) GetConferences(ctx context.Context, in *ConferencesRequest, opts ...grpc.CallOption) (*ConferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConferencesResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetConferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetConferenceAgenda(ctx context.Context, in *AgendaRequest, opts ...grpc.CallOption) (*AgendaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgendaResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetConferenceAgenda_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetConferencesPage(ctx context.Context, in *ConferencesPageRequest, opts ...grpc.CallOption) (*ConferencesPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConferencesPageResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetConferencesPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetConferencesMetrics(ctx context.Context, in *ConferencesMetricsRequest, opts ...grpc.CallOption) (*ConferencesMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConferencesMetricsResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetConferencesMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) CreateConference(ctx context.Context, in *CreateConferenceRequest, opts ...grpc.CallOption) (*CreateConferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConferenceResponse)
	err := c.cc.Invoke(ctx, ConferenceService_CreateConference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) ModifyConference(ctx context.Context, in *ModifyConferenceRequest, opts ...grpc.CallOption) (*ModifyConferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyConferenceResponse)
	err := c.cc.Invoke(ctx, ConferenceService_ModifyConference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) AddUserToConference(ctx context.Context, in *AddUserToConferenceRequest, opts ...grpc.CallOption) (*AddUserToConferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserToConferenceResponse)
	err := c.cc.Invoke(ctx, ConferenceService_AddUserToConference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) RemoveUserFromConference(ctx context.Context, in *RemoveUserFromConferenceRequest, opts ...grpc.CallOption) (*RemoveUserFromConferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromConferenceResponse)
	err := c.cc.Invoke(ctx, ConferenceService_RemoveUserFromConference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) IsUserAssociatedWithConference(ctx context.Context, in *IsUserAssociatedWithConferenceRequest, opts ...grpc.CallOption) (*IsUserAssociatedWithConferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsUserAssociatedWithConferenceResponse)
	err := c.cc.Invoke(ctx, ConferenceService_IsUserAssociatedWithConference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetOrganizerMetrics(ctx context.Context, in *GetOrganizerMetricsRequest, opts ...grpc.CallOption) (*GetOrganizerMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizerMetricsResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetOrganizerMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetParticipantsTrend(ctx context.Context, in *ParticipantsTrendRequest, opts ...grpc.CallOption) (*ParticipantsTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParticipantsTrendResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetParticipantsTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetTickets(ctx context.Context, in *TicketsRequest, opts ...grpc.CallOption) (*TicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketsResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) GetConferenceOrganizer(ctx context.Context, in *GetConferenceOrganizerRequest, opts ...grpc.CallOption) (*GetConferenceOrganizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConferenceOrganizerResponse)
	err := c.cc.Invoke(ctx, ConferenceService_GetConferenceOrganizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) ValidateTicket(ctx context.Context, in *ValidateTicketRequest, opts ...grpc.CallOption) (*ValidateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTicketResponse)
	err := c.cc.Invoke(ctx, ConferenceService_ValidateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceServiceServer is the server API for ConferenceService service.
// All implementations must embed UnimplementedConferenceServiceServer
// for forward compatibility.
type ConferenceServiceServer interface {
	GetConferences(context.Context, *ConferencesRequest) (*ConferencesResponse, error)
	GetConferenceAgenda(context.Context, *AgendaRequest) (*AgendaResponse, error)
	GetConferencesPage(context.Context, *ConferencesPageRequest) (*ConferencesPageResponse, error)
	GetConferencesMetrics(context.Context, *ConferencesMetricsRequest) (*ConferencesMetricsResponse, error)
	CreateConference(context.Context, *CreateConferenceRequest) (*CreateConferenceResponse, error)
	ModifyConference(context.Context, *ModifyConferenceRequest) (*ModifyConferenceResponse, error)
	AddUserToConference(context.Context, *AddUserToConferenceRequest) (*AddUserToConferenceResponse, error)
	RemoveUserFromConference(context.Context, *RemoveUserFromConferenceRequest) (*RemoveUserFromConferenceResponse, error)
	IsUserAssociatedWithConference(context.Context, *IsUserAssociatedWithConferenceRequest) (*IsUserAssociatedWithConferenceResponse, error)
	GetOrganizerMetrics(context.Context, *GetOrganizerMetricsRequest) (*GetOrganizerMetricsResponse, error)
	GetParticipantsTrend(context.Context, *ParticipantsTrendRequest) (*ParticipantsTrendResponse, error)
	GetTickets(context.Context, *TicketsRequest) (*TicketsResponse, error)
	GetConferenceOrganizer(context.Context, *GetConferenceOrganizerRequest) (*GetConferenceOrganizerResponse, error)
	ValidateTicket(context.Context, *ValidateTicketRequest) (*ValidateTicketResponse, error)
	mustEmbedUnimplementedConferenceServiceServer()
}

// UnimplementedConferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConferenceServiceServer struct{}

func (UnimplementedConferenceServiceServer) GetConferences(context.Context, *ConferencesRequest) (*ConferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConferences not implemented")
}
func (UnimplementedConferenceServiceServer) GetConferenceAgenda(context.Context, *AgendaRequest) (*AgendaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConferenceAgenda not implemented")
}
func (UnimplementedConferenceServiceServer) GetConferencesPage(context.Context, *ConferencesPageRequest) (*ConferencesPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConferencesPage not implemented")
}
func (UnimplementedConferenceServiceServer) GetConferencesMetrics(context.Context, *ConferencesMetricsRequest) (*ConferencesMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConferencesMetrics not implemented")
}
func (UnimplementedConferenceServiceServer) CreateConference(context.Context, *CreateConferenceRequest) (*CreateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConference not implemented")
}
func (UnimplementedConferenceServiceServer) ModifyConference(context.Context, *ModifyConferenceRequest) (*ModifyConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyConference not implemented")
}
func (UnimplementedConferenceServiceServer) AddUserToConference(context.Context, *AddUserToConferenceRequest) (*AddUserToConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToConference not implemented")
}
func (UnimplementedConferenceServiceServer) RemoveUserFromConference(context.Context, *RemoveUserFromConferenceRequest) (*RemoveUserFromConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromConference not implemented")
}
func (UnimplementedConferenceServiceServer) IsUserAssociatedWithConference(context.Context, *IsUserAssociatedWithConferenceRequest) (*IsUserAssociatedWithConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserAssociatedWithConference not implemented")
}
func (UnimplementedConferenceServiceServer) GetOrganizerMetrics(context.Context, *GetOrganizerMetricsRequest) (*GetOrganizerMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizerMetrics not implemented")
}
func (UnimplementedConferenceServiceServer) GetParticipantsTrend(context.Context, *ParticipantsTrendRequest) (*ParticipantsTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantsTrend not implemented")
}
func (UnimplementedConferenceServiceServer) GetTickets(context.Context, *TicketsRequest) (*TicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickets not implemented")
}
func (UnimplementedConferenceServiceServer) GetConferenceOrganizer(context.Context, *GetConferenceOrganizerRequest) (*GetConferenceOrganizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConferenceOrganizer not implemented")
}
func (UnimplementedConferenceServiceServer) ValidateTicket(context.Context, *ValidateTicketRequest) (*ValidateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTicket not implemented")
}
func (UnimplementedConferenceServiceServer) mustEmbedUnimplementedConferenceServiceServer() {}
func (UnimplementedConferenceServiceServer) testEmbeddedByValue()                           {}

// UnsafeConferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConferenceServiceServer will
// result in compilation errors.
type UnsafeConferenceServiceServer interface {
	mustEmbedUnimplementedConferenceServiceServer()
}

func RegisterConferenceServiceServer(s grpc.ServiceRegistrar, srv ConferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedConferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConferenceService_ServiceDesc, srv)
}

func _ConferenceService_GetConferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetConferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetConferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetConferences(ctx, req.(*ConferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetConferenceAgenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgendaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetConferenceAgenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetConferenceAgenda_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetConferenceAgenda(ctx, req.(*AgendaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetConferencesPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferencesPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetConferencesPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetConferencesPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetConferencesPage(ctx, req.(*ConferencesPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetConferencesMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferencesMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetConferencesMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetConferencesMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetConferencesMetrics(ctx, req.(*ConferencesMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_CreateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).CreateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_CreateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).CreateConference(ctx, req.(*CreateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_ModifyConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).ModifyConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_ModifyConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).ModifyConference(ctx, req.(*ModifyConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_AddUserToConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).AddUserToConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_AddUserToConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).AddUserToConference(ctx, req.(*AddUserToConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_RemoveUserFromConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).RemoveUserFromConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_RemoveUserFromConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).RemoveUserFromConference(ctx, req.(*RemoveUserFromConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_IsUserAssociatedWithConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserAssociatedWithConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).IsUserAssociatedWithConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_IsUserAssociatedWithConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).IsUserAssociatedWithConference(ctx, req.(*IsUserAssociatedWithConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetOrganizerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetOrganizerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetOrganizerMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetOrganizerMetrics(ctx, req.(*GetOrganizerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetParticipantsTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantsTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetParticipantsTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetParticipantsTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetParticipantsTrend(ctx, req.(*ParticipantsTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetTickets(ctx, req.(*TicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_GetConferenceOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConferenceOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).GetConferenceOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_GetConferenceOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).GetConferenceOrganizer(ctx, req.(*GetConferenceOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_ValidateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).ValidateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceService_ValidateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).ValidateTicket(ctx, req.(*ValidateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConferenceService_ServiceDesc is the grpc.ServiceDesc for ConferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conference.ConferenceService",
	HandlerType: (*ConferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConferences",
			Handler:    _ConferenceService_GetConferences_Handler,
		},
		{
			MethodName: "GetConferenceAgenda",
			Handler:    _ConferenceService_GetConferenceAgenda_Handler,
		},
		{
			MethodName: "GetConferencesPage",
			Handler:    _ConferenceService_GetConferencesPage_Handler,
		},
		{
			MethodName: "GetConferencesMetrics",
			Handler:    _ConferenceService_GetConferencesMetrics_Handler,
		},
		{
			MethodName: "CreateConference",
			Handler:    _ConferenceService_CreateConference_Handler,
		},
		{
			MethodName: "ModifyConference",
			Handler:    _ConferenceService_ModifyConference_Handler,
		},
		{
			MethodName: "AddUserToConference",
			Handler:    _ConferenceService_AddUserToConference_Handler,
		},
		{
			MethodName: "RemoveUserFromConference",
			Handler:    _ConferenceService_RemoveUserFromConference_Handler,
		},
		{
			MethodName: "IsUserAssociatedWithConference",
			Handler:    _ConferenceService_IsUserAssociatedWithConference_Handler,
		},
		{
			MethodName: "GetOrganizerMetrics",
			Handler:    _ConferenceService_GetOrganizerMetrics_Handler,
		},
		{
			MethodName: "GetParticipantsTrend",
			Handler:    _ConferenceService_GetParticipantsTrend_Handler,
		},
		{
			MethodName: "GetTickets",
			Handler:    _ConferenceService_GetTickets_Handler,
		},
		{
			MethodName: "GetConferenceOrganizer",
			Handler:    _ConferenceService_GetConferenceOrganizer_Handler,
		},
		{
			MethodName: "ValidateTicket",
			Handler:    _ConferenceService_ValidateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conference/conference.proto",
}
