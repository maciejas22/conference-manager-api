package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"time"

	"github.com/maciejas22/conference-manager/api/graph"
	"github.com/maciejas22/conference-manager/api/models"
)

func (r *queryResolver) News(ctx context.Context) ([]*models.News, error) {
	news, err := r.newsRepo.GetAll()
	if err != nil {
		return nil, err
	}

	var result []*models.News
	for _, n := range news {
		if err != nil {
			return nil, err
		}
		result = append(result, &models.News{
			ID:      n.Id,
			Title:   n.Title,
			Content: n.Content,
			Date:    n.CreatedAt,
		})
	}

	return result, nil
}

func (r *queryResolver) TermsAndConditions(ctx context.Context) (*models.TermsOfService, error) {
	termsOfService, err := r.termsOfServiceRepo.GetTermsOfService()
	if err != nil {
		return nil, err
	}

	parsedDate, err := time.Parse(time.RFC3339Nano, termsOfService.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &models.TermsOfService{
		ID:              termsOfService.Id,
		UpdatedAt:       parsedDate,
		Introduction:    termsOfService.Introduction,
		Acknowledgement: termsOfService.Acknowledgement,
	}, nil
}

func (r *sectionResolver) Subsections(ctx context.Context, obj *models.Section) ([]*models.SubSection, error) {
	subSections, err := r.subsectionRepo.GetSubsections(obj.ID)
	if err != nil {
		return nil, err
	}

	var result []*models.SubSection
	for _, s := range subSections {
		result = append(result, &models.SubSection{
			ID:      s.Id,
			Title:   &s.Title,
			Content: s.Content,
		})
	}

	return result, nil
}

func (r *termsOfServiceResolver) Sections(ctx context.Context, obj *models.TermsOfService) ([]*models.Section, error) {
	sections, err := r.sectionRepo.GetSections(obj.ID)
	if err != nil {
		return nil, err
	}

	var result []*models.Section
	for _, s := range sections {
		result = append(result, &models.Section{
			ID:          s.Id,
			Title:       &s.Title,
			Content:     s.Content,
			SubSections: nil,
		})
	}

	return result, nil
}

func (r *Resolver) Section() graph.SectionResolver { return &sectionResolver{r} }

func (r *Resolver) TermsOfService() graph.TermsOfServiceResolver { return &termsOfServiceResolver{r} }

type sectionResolver struct{ *Resolver }
type termsOfServiceResolver struct{ *Resolver }
