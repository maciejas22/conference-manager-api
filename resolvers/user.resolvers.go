package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/maciejas22/conference-manager/api/internal/auth"
	"github.com/maciejas22/conference-manager/api/models"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

func (r *mutationResolver) UpdateUser(ctx context.Context, updateUserInput models.UpdateUserInput) (*models.User, error) {
	u, _ := auth.FromContext(ctx)
	user, err := r.userRepo.Update(u.Subject, updateUserInput.Username, updateUserInput.Email, updateUserInput.Name, updateUserInput.Surname)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return &models.User{
		ID:       user.Id,
		Name:     user.Name,
		Surname:  user.Surname,
		Username: user.Username,
		Email:    user.Email,
		Role:     models.Role(user.Role),
	}, nil
}

func (r *queryResolver) User(ctx context.Context) (*models.User, error) {
	u, ok := auth.FromContext(ctx)
	if !ok {
		return nil, gqlerror.Errorf("unauthorized user")
	}

	user, err := r.Resolver.userRepo.GetByID(u.Subject)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}
	return &models.User{
		ID:       user.Id,
		Name:     user.Name,
		Surname:  user.Surname,
		Username: user.Username,
		Email:    user.Email,
		Role:     models.Role(user.Role),
	}, nil
}
