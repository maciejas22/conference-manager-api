package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/maciejas22/conference-manager-api/cm-gateway/internal/graph/model"
	pb "github.com/maciejas22/conference-manager-api/cm-proto/info"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"google.golang.org/protobuf/types/known/emptypb"
)

// News is the resolver for the news field.
func (r *queryResolver) News(ctx context.Context, page model.Page) (*model.NewsPage, error) {
	news, err := r.infoServiceClient.ListNews(ctx, &pb.NewsRequest{
		Page: &pb.Page{
			Number: page.Number,
			Size:   page.Size,
		},
	})
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	var newsList []*model.News
	for _, n := range news.NewsPage.Data {
		newsList = append(newsList, &model.News{
			ID:      n.Id,
			Title:   n.Title,
			Content: n.Content,
			Date:    n.Date.AsTime(),
		})
	}

	return &model.NewsPage{
		Data: newsList,
		Meta: &model.NewsMeta{
			Page: &model.PageInfo{
				TotalItems: news.NewsPage.Meta.TotalItems,
				TotalPages: news.NewsPage.Meta.TotalPages,
				Number:     news.NewsPage.Meta.Number,
				Size:       news.NewsPage.Meta.Size,
			},
		},
	}, nil
}

// TermsAndConditions is the resolver for the termsAndConditions field.
func (r *queryResolver) TermsAndConditions(ctx context.Context) (*model.TermsOfService, error) {
	tos, err := r.infoServiceClient.GetTermsOfService(ctx, &emptypb.Empty{})
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	var sections []*model.Section
	for _, sect := range tos.TermsOfService.Sections {
		var subSections []*model.SubSection
		for _, subSect := range sect.Subsections {
			subSections = append(subSections, &model.SubSection{
				ID:      subSect.Id,
				Title:   subSect.Title,
				Content: subSect.Content,
			})
		}

		sections = append(sections, &model.Section{
			ID:          sect.Id,
			Title:       &sect.Title,
			Content:     &sect.Content,
			Subsections: subSections,
		})
	}

	return &model.TermsOfService{
		ID:              tos.TermsOfService.Id,
		Introduction:    tos.TermsOfService.Introduction,
		Acknowledgement: tos.TermsOfService.Acknowledgement,
		UpdatedAt:       tos.TermsOfService.UpdatedAt.AsTime(),
		Sections:        sections,
	}, nil
}
