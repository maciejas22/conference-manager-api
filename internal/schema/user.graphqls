enum Role {
  Organizer
  Participant
}

type NewParticipantsTrend {
  date: Time!
  newParticipants: Int!
}

type OrganizerMetrics {
  runningConferences: Int!
  participantsCount: Int!
  averageParticipantsCount: Float!
  totalOrganizedConferences: Int!
  newParticipantsTrend: [NewParticipantsTrend!]!
}

type User {
  id: ID!
  name: String
  surname: String
  username: String
  email: String!
  role: Role!
  metrics: OrganizerMetrics @hasRole(role: Organizer)
}

extend type Query {
  user: User @authenticated
  isUserAssociatedWithConference(conferenceId: ID!): Boolean! @authenticated
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  email: String!
  password: String!
  role: Role!
}

input UpdateUserInput {
  name: String!
  surname: String!
  username: String!
  email: String!
}

extend type Mutation {
  updateSession: String! @authenticated
  loginUser(loginUserInput: LoginUserInput!): String!
  registerUser(registerUserInput: RegisterUserInput!): String!
  updateUser(updateUserInput: UpdateUserInput!): ID! @authenticated
  editPassword(password: String!): Boolean @authenticated
}
