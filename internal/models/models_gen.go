// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AgendaItem struct {
	ID        int       `json:"id"`
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	Event     string    `json:"event"`
	Speaker   string    `json:"speaker"`
}

type AgendaItemInput struct {
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	Event     string    `json:"event"`
	Speaker   string    `json:"speaker"`
}

type Conference struct {
	ID                   int           `json:"id"`
	Title                string        `json:"title"`
	StartDate            time.Time     `json:"startDate"`
	EndDate              time.Time     `json:"endDate"`
	Location             string        `json:"location"`
	Website              *string       `json:"website,omitempty"`
	Acronym              *string       `json:"acronym,omitempty"`
	AdditionalInfo       *string       `json:"additionalInfo,omitempty"`
	Agenda               []*AgendaItem `json:"agenda"`
	ParticipantsCount    int           `json:"participantsCount"`
	ParticipantsLimit    *int          `json:"participantsLimit,omitempty"`
	RegistrationDeadline *time.Time    `json:"registrationDeadline,omitempty"`
	Files                []*File       `json:"files"`
	EventsCount          int           `json:"eventsCount"`
}

type ConferenceMeta struct {
	Page *PageInfo `json:"page"`
}

type ConferencesFilters struct {
	AssociatedOnly *bool   `json:"associatedOnly,omitempty"`
	Title          *string `json:"title,omitempty"`
}

type ConferencesMetrics struct {
	RunningConferences        int `json:"runningConferences"`
	StartingInLessThan24Hours int `json:"startingInLessThan24Hours"`
	TotalConducted            int `json:"totalConducted"`
	ParticipantsToday         int `json:"participantsToday"`
}

type ConferencesPage struct {
	Data    []*Conference       `json:"data"`
	Meta    *ConferenceMeta     `json:"meta"`
	Metrics *ConferencesMetrics `json:"metrics"`
}

type CreateAgendaItemInput struct {
	CreateItem *AgendaItemInput `json:"createItem,omitempty"`
}

type CreateConferenceInput struct {
	Title                string                       `json:"title"`
	StartDate            time.Time                    `json:"startDate"`
	EndDate              time.Time                    `json:"endDate"`
	Location             string                       `json:"location"`
	Website              *string                      `json:"website,omitempty"`
	Acronym              *string                      `json:"acronym,omitempty"`
	AdditionalInfo       *string                      `json:"additionalInfo,omitempty"`
	ParticipantsLimit    *int                         `json:"participantsLimit,omitempty"`
	RegistrationDeadline *time.Time                   `json:"registrationDeadline,omitempty"`
	Agenda               []*CreateAgendaItemInput     `json:"agenda,omitempty"`
	Files                []*CreateConferenceInputFile `json:"files,omitempty"`
}

type CreateConferenceInputFile struct {
	UploadFile *UploadFile `json:"uploadFile,omitempty"`
}

type DeleteFile struct {
	Key string `json:"key"`
}

type File struct {
	Key  string `json:"key"`
	URL  string `json:"url"`
	Size int    `json:"size"`
}

type LoginUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ModifyAgendaItemInput struct {
	CreateItem *AgendaItemInput `json:"createItem,omitempty"`
	DeleteItem *int             `json:"deleteItem,omitempty"`
}

type ModifyConferenceInput struct {
	ID                   int                          `json:"id"`
	Title                *string                      `json:"title,omitempty"`
	StartDate            *time.Time                   `json:"startDate,omitempty"`
	EndDate              *time.Time                   `json:"endDate,omitempty"`
	Location             *string                      `json:"location,omitempty"`
	Website              *string                      `json:"website,omitempty"`
	Acronym              *string                      `json:"acronym,omitempty"`
	AdditionalInfo       *string                      `json:"additionalInfo,omitempty"`
	ParticipantsLimit    *int                         `json:"participantsLimit,omitempty"`
	RegistrationDeadline *time.Time                   `json:"registrationDeadline,omitempty"`
	Agenda               []*ModifyAgendaItemInput     `json:"agenda,omitempty"`
	Files                []*ModifyConferenceInputFile `json:"files,omitempty"`
}

type ModifyConferenceInputFile struct {
	UploadFile *UploadFile `json:"uploadFile,omitempty"`
	DeleteFile *DeleteFile `json:"deleteFile,omitempty"`
}

type Mutation struct {
}

type NewParticipantsTrend struct {
	Date            time.Time `json:"date"`
	NewParticipants int       `json:"newParticipants"`
}

type News struct {
	ID      int       `json:"id"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Date    time.Time `json:"date"`
}

type NewsMeta struct {
	Page *PageInfo `json:"page"`
}

type NewsPage struct {
	Data []*News   `json:"data"`
	Meta *NewsMeta `json:"meta"`
}

type OrganizerMetrics struct {
	RunningConferences        int                     `json:"runningConferences"`
	ParticipantsCount         int                     `json:"participantsCount"`
	AverageParticipantsCount  float64                 `json:"averageParticipantsCount"`
	TotalOrganizedConferences int                     `json:"totalOrganizedConferences"`
	NewParticipantsTrend      []*NewParticipantsTrend `json:"newParticipantsTrend"`
}

type Page struct {
	Number int `json:"number"`
	Size   int `json:"size"`
}

type PageInfo struct {
	TotalItems int `json:"totalItems"`
	TotalPages int `json:"totalPages"`
	Number     int `json:"number"`
	Size       int `json:"size"`
}

type Query struct {
}

type RegisterUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
}

type Section struct {
	ID          int           `json:"id"`
	Title       *string       `json:"title,omitempty"`
	Content     *string       `json:"content,omitempty"`
	Subsections []*SubSection `json:"subsections"`
}

type Sort struct {
	Column string `json:"column"`
	Order  Order  `json:"order"`
}

type SubSection struct {
	ID      int    `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

type TermsOfService struct {
	ID              int        `json:"id"`
	UpdatedAt       time.Time  `json:"updatedAt"`
	Introduction    string     `json:"introduction"`
	Acknowledgement string     `json:"acknowledgement"`
	Sections        []*Section `json:"sections"`
}

type UpdateUserInput struct {
	Name     string `json:"name"`
	Surname  string `json:"surname"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type UploadFile struct {
	FileName      string `json:"fileName"`
	Base64Content string `json:"base64Content"`
}

type User struct {
	ID       int               `json:"id"`
	Name     *string           `json:"name,omitempty"`
	Surname  *string           `json:"surname,omitempty"`
	Username *string           `json:"username,omitempty"`
	Email    string            `json:"email"`
	Role     Role              `json:"role"`
	Metrics  *OrganizerMetrics `json:"metrics,omitempty"`
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleOrganizer   Role = "Organizer"
	RoleParticipant Role = "Participant"
)

var AllRole = []Role{
	RoleOrganizer,
	RoleParticipant,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleOrganizer, RoleParticipant:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
