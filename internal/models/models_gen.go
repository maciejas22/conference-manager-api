// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type ConferenceMeta struct {
	Page *PageInfo `json:"page"`
}

type ConferencePage struct {
	Data []*Conference   `json:"data"`
	Meta *ConferenceMeta `json:"meta"`
}

type ConferencesMetrics struct {
	RunningConferences        int `json:"runningConferences"`
	StartingInLessThan24Hours int `json:"startingInLessThan24Hours"`
	TotalConducted            int `json:"totalConducted"`
	ParticipantsToday         int `json:"participantsToday"`
}

type CreateAgendaItemInput struct {
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	Event     string    `json:"event"`
	Speaker   string    `json:"speaker"`
}

type CreateConferenceInput struct {
	Title                string                       `json:"title"`
	StartDate            time.Time                    `json:"startDate"`
	EndDate              time.Time                    `json:"endDate"`
	Location             string                       `json:"location"`
	Website              *string                      `json:"website,omitempty"`
	Acronym              *string                      `json:"acronym,omitempty"`
	AdditionalInfo       *string                      `json:"additionalInfo,omitempty"`
	ParticipantsLimit    *int                         `json:"participantsLimit,omitempty"`
	RegistrationDeadline *time.Time                   `json:"registrationDeadline,omitempty"`
	Agenda               []*CreateAgendaItemInput     `json:"agenda,omitempty"`
	Files                []*CreateConferenceInputFile `json:"files,omitempty"`
}

type CreateConferenceInputFile struct {
	UploadFile *UploadFile `json:"uploadFile,omitempty"`
}

type DeleteFile struct {
	ID string `json:"id"`
}

type ModifyAgendaItemInput struct {
	ID        *string   `json:"id,omitempty"`
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	Event     string    `json:"event"`
	Speaker   string    `json:"speaker"`
	Destroy   *bool     `json:"_destroy,omitempty"`
}

type ModifyConferenceInput struct {
	ID                   string                       `json:"id"`
	Title                *string                      `json:"title,omitempty"`
	StartDate            *time.Time                   `json:"startDate,omitempty"`
	EndDate              *time.Time                   `json:"endDate,omitempty"`
	Location             *string                      `json:"location,omitempty"`
	Website              *string                      `json:"website,omitempty"`
	Acronym              *string                      `json:"acronym,omitempty"`
	AdditionalInfo       *string                      `json:"additionalInfo,omitempty"`
	ParticipantsLimit    *int                         `json:"participantsLimit,omitempty"`
	RegistrationDeadline *time.Time                   `json:"registrationDeadline,omitempty"`
	Agenda               []*ModifyAgendaItemInput     `json:"agenda,omitempty"`
	Files                []*ModifyConferenceInputFile `json:"files,omitempty"`
}

type ModifyConferenceInputFile struct {
	UploadFile *UploadFile `json:"uploadFile,omitempty"`
	DeleteFile *DeleteFile `json:"deleteFile,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateUserInput struct {
	Name     string `json:"name"`
	Surname  string `json:"surname"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type UploadFile struct {
	File *graphql.Upload `json:"file,omitempty"`
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleOrganizer   Role = "Organizer"
	RoleParticipant Role = "Participant"
)

var AllRole = []Role{
	RoleOrganizer,
	RoleParticipant,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleOrganizer, RoleParticipant:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
