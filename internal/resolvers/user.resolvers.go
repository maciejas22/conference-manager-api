package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"

	"github.com/maciejas22/conference-manager/api/internal/auth"
	"github.com/maciejas22/conference-manager/api/internal/models"
	"github.com/maciejas22/conference-manager/api/internal/services"
)

func (r *mutationResolver) LoginUser(ctx context.Context, loginUserInput models.LoginUserInput) (*string, error) {
	sessionID, err := services.LoginUser(ctx, r.dbClient, loginUserInput)
	if err != nil {
		return nil, err
	}

	sessionInfo := auth.GetSessionInfo(ctx)
	if sessionInfo == nil {
		return nil, errors.New("sessionInfo is nil")
	}
	sessionInfo.SessionId = *sessionID

	return sessionID, nil
}

func (r *mutationResolver) RegisterUser(ctx context.Context, registerUserInput models.RegisterUserInput) (*string, error) {
	return services.RegisterUser(ctx, r.dbClient, registerUserInput)
}

func (r *mutationResolver) UpdateUser(ctx context.Context, updateUserInput models.UpdateUserInput) (*models.User, error) {
	si := auth.GetSessionInfo(ctx)
	return services.UpdateUser(ctx, r.dbClient, si.UserID, updateUserInput)
}

func (r *queryResolver) User(ctx context.Context) (*models.User, error) {
	si := auth.GetSessionInfo(ctx)
	return services.GetUserData(ctx, r.dbClient, si.UserID)
}
