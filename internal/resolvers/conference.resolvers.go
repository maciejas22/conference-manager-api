package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/maciejas22/conference-manager/api/internal/auth"
	"github.com/maciejas22/conference-manager/api/internal/graph"
	"github.com/maciejas22/conference-manager/api/internal/models"
	"github.com/maciejas22/conference-manager/api/internal/services"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

func (r *conferenceResolver) Agenda(ctx context.Context, obj *models.Conference) ([]*models.AgendaItem, error) {
	return services.GetConferenceAgenda(ctx, r.dbClient, obj.ID)
}

func (r *conferenceResolver) ParticipantsCount(ctx context.Context, obj *models.Conference) (int, error) {
	return services.GetParticipantsCount(ctx, r.dbClient, obj.ID)
}

func (r *conferenceResolver) EventsCount(ctx context.Context, obj *models.Conference) (int, error) {
	return services.GetAgendaItemsCount(ctx, r.dbClient, obj.ID)
}

func (r *mutationResolver) CreateConference(ctx context.Context, createConferenceInput models.CreateConferenceInput) (*models.Conference, error) {
	c, _ := auth.FromContext(ctx)
	return services.CreateConference(ctx, r.dbClient, c.Subject, createConferenceInput)
}

func (r *mutationResolver) ModifyConference(ctx context.Context, input models.ModifyConferenceInput) (*models.Conference, error) {
	return services.ModifyConference(ctx, r.dbClient, input)
}

func (r *mutationResolver) AddUserToConference(ctx context.Context, conferenceID string) (*models.Conference, error) {
	c, _ := auth.FromContext(ctx)

	return services.AddUserToConference(ctx, r.dbClient, c.Subject, conferenceID)
}

func (r *mutationResolver) RemoveUserFromConference(ctx context.Context, conferenceID string) (*models.Conference, error) {
	c, _ := auth.FromContext(ctx)

	return services.RemoveUserFromConference(ctx, r.dbClient, c.Subject, conferenceID)
}

func (r *queryResolver) Conferences(ctx context.Context, page *models.Page, sort *models.Sort, filters *models.ConferenceFilter) (*models.ConferencePage, error) {
	c, _ := auth.FromContext(ctx)
	return services.GetAllConferences(ctx, r.dbClient, c.Subject, page, sort, filters)
}

func (r *queryResolver) OrganizerMetrics(ctx context.Context) (*models.OrganizerMetrics, error) {
	c, _ := auth.FromContext(ctx)
	return services.GetOrganizerMetrics(ctx, r.dbClient, c.Subject)
}

func (r *queryResolver) ParticipantsJoiningTrend(ctx context.Context) (*models.ParticipantsJoiningTrend, error) {
	c, _ := auth.FromContext(ctx)
	x, e := services.GetParticipantsJoiningTrend(ctx, r.dbClient, c.Subject)
	fmt.Println(*x.Trend[0])
	return x, e
}

func (r *queryResolver) ConferencesMetrics(ctx context.Context) (*models.ConferencesMetrics, error) {
	return services.GetConferencesMetrics(ctx, r.dbClient)
}

func (r *queryResolver) Conference(ctx context.Context, id string) (*models.Conference, error) {
	conferenceData, err := services.GetConference(ctx, r.dbClient, id)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	conferenceFiles, err := services.GetConferenceFiles(ctx, r.s3Client, id)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	conferenceData.Files = conferenceFiles
	return conferenceData, nil
}

func (r *queryResolver) IsParticipant(ctx context.Context, conferenceID string) (*bool, error) {
	c, _ := auth.FromContext(ctx)

	return services.IsConferenceParticipant(ctx, r.dbClient, c.Subject, conferenceID)
}

func (r *queryResolver) IsOrganizer(ctx context.Context, conferenceID string) (*bool, error) {
	c, _ := auth.FromContext(ctx)

	return services.IsConferenceOrganizer(ctx, r.dbClient, c.Subject, conferenceID)
}

func (r *Resolver) Conference() graph.ConferenceResolver { return &conferenceResolver{r} }

func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type conferenceResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
