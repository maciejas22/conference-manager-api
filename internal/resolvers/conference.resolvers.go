package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/maciejas22/conference-manager/api/internal/auth"
	"github.com/maciejas22/conference-manager/api/internal/files"
	"github.com/maciejas22/conference-manager/api/internal/graph"
	"github.com/maciejas22/conference-manager/api/internal/models"
	"github.com/maciejas22/conference-manager/api/internal/services"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

func (r *conferenceResolver) Agenda(ctx context.Context, obj *models.Conference) ([]*models.AgendaItem, error) {
	return services.GetConferenceAgenda(ctx, r.dbClient, obj.ID)
}

func (r *conferenceResolver) ParticipantsCount(ctx context.Context, obj *models.Conference) (int, error) {
	return services.GetParticipantsCount(ctx, r.dbClient, obj.ID)
}

func (r *conferenceResolver) Files(ctx context.Context, obj *models.Conference) ([]*models.File, error) {
	conferenceFiles, err := files.GetConferenceFiles(ctx, r.s3Client, obj.ID)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return conferenceFiles, nil
}

func (r *conferenceResolver) EventsCount(ctx context.Context, obj *models.Conference) (int, error) {
	return services.GetAgendaItemsCount(ctx, r.dbClient, obj.ID)
}

func (r *conferencesPageResolver) Metrics(ctx context.Context, obj *models.ConferencesPage) (*models.ConferencesMetrics, error) {
	m, err := services.GetConferencesMetrics(ctx, r.dbClient)
	if err != nil {
		return nil, gqlerror.Errorf("Failed to get conferences metrics")
	}

	return m, nil
}

func (r *mutationResolver) CreateConference(ctx context.Context, createConferenceInput models.CreateConferenceInput) (int, error) {
	si := auth.GetSessionInfo(ctx)
	c, err := services.CreateConference(ctx, r.dbClient, r.s3Client, si.UserId, createConferenceInput)
	if err != nil {
		return 0, gqlerror.Errorf("Failed to create conference")
	}
	return *c, nil
}

func (r *mutationResolver) ModifyConference(ctx context.Context, input models.ModifyConferenceInput) (int, error) {
	c, err := services.ModifyConference(ctx, r.dbClient, r.s3Client, input)
	if err != nil {
		return 0, gqlerror.Errorf("Failed to modify conference")
	}
	return *c, nil
}

func (r *mutationResolver) AddUserToConference(ctx context.Context, conferenceID int) (int, error) {
	si := auth.GetSessionInfo(ctx)
	cId, err := services.AddUserToConference(ctx, r.dbClient, si.UserId, conferenceID)
	if err != nil {
		return 0, gqlerror.Errorf("Failed to add user to conference")
	}
	return *cId, nil
}

func (r *mutationResolver) RemoveUserFromConference(ctx context.Context, conferenceID int) (int, error) {
	si := auth.GetSessionInfo(ctx)
	cId, err := services.RemoveUserFromConference(ctx, r.dbClient, si.UserId, conferenceID)
	if err != nil {
		return 0, gqlerror.Errorf("Failed to remove user from conference")
	}
	return *cId, nil
}

func (r *queryResolver) Conference(ctx context.Context, id int) (*models.Conference, error) {
	conferenceData, err := services.GetConference(ctx, r.dbClient, id)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return conferenceData, nil
}

func (r *queryResolver) Conferences(ctx context.Context, page *models.Page, sort *models.Sort, filters *models.ConferencesFilters) (*models.ConferencesPage, error) {
	si := auth.GetSessionInfo(ctx)
	return services.GetAllConferences(ctx, r.dbClient, si.UserId, page, sort, filters)
}

func (r *Resolver) Conference() graph.ConferenceResolver { return &conferenceResolver{r} }

func (r *Resolver) ConferencesPage() graph.ConferencesPageResolver {
	return &conferencesPageResolver{r}
}

func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type conferenceResolver struct{ *Resolver }
type conferencesPageResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
